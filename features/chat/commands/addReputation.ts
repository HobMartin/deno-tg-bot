import { Context } from "grammy";
import { db } from "../../../db/index.ts";
import { mention } from "../../../lib/username.ts";
import { getRandomNumber } from "../../../lib/getRandomNumber.ts";
import { getPostfix } from "../utils/reputation.ts";

const TIMEOUT = 10000; // 10 seconds

export const addReputation = async (ctx: Context) => {
  if (!ctx.update.message) return;
  const { from, reply_to_message: reply } = ctx.update.message;
  if (!reply) return;
  if (reply.from?.is_bot) return;
  if (reply.text === "+") {
    ctx.reply(
      "–©–æ–± –ø—ñ–¥–Ω—è—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
    );
    return;
  }
  //timeout
  try {
    const lastReputation = await db
      .collection("users")
      .findOne({ userId: from?.id });
    if (lastReputation?.lastReputation) {
      const timeout = TIMEOUT; // 10 seconds
      const now = Date.now();
      const diff = now - lastReputation.lastReputation;
      if (diff < timeout) {
        const seconds = Math.floor((timeout - diff) / 1000) % 60;
        ctx.reply(
          `–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Ç–∞–∫ —à–≤–∏–¥–∫–æ! –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${seconds} —Å–µ–∫—É–Ω–¥`
        );
        return;
      }
    }
  } catch (_e) {
    ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!");
  }

  if (reply?.from?.id === from?.id) {
    ctx.reply("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ —Ä–µ–ø—É—Ç–∞—Ü—ñ—é —Å–∞–º–æ–º—É —Å–æ–±—ñ!");
    return;
  }

  try {
    const reputationInc = getRandomNumber();
    const toUser = await db
      .collection("users")
      .findOneAndUpdate(
        { userId: reply.from?.id },
        { $inc: { reputation: reputationInc } }
      );
    const fromUser = await db
      .collection("users")
      .findOneAndUpdate(
        { userId: from?.id },
        { $set: { lastReputation: Date.now() } }
      );

    ctx.reply(
      `ü•≥ ${mention(from)}(${
        fromUser?.value?.reputation
      }) –∑–±—ñ–ª—å—à–∏–≤(-–ª–∞) —Ä–µ–ø—É—Ç–∞—Ü—ñ—é ${mention(reply.from)}(${
        toUser.value?.reputation
      }) –Ω–∞ ${getPostfix(reputationInc)}.`,
      { parse_mode: "HTML" }
    );
  } catch (_e) {
    ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!");
  }
};
